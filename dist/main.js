(()=>{"use strict";var __webpack_modules__={734:()=>{eval("\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  url: 'https://mesto.nomoreparties.co',\n  cohort: \"wbf-cohort-5\",\n  headers: {\n    'content-type': 'application/json',\n    'authorization': 'e428d967-ad54-4ed1-8f27-1e899a8fcfdd'\n  }\n};\nfunction dressResponse(res) {\n  return res.ok ? res.json() : res.json().then(function (data) {\n    return Promise.reject(data);\n  });\n}\nfunction getUserData() {\n  return fetch(\"\".concat(config.url, \"/v1/\").concat(config.cohort, \"/users/me\"), {\n    method: \"GET\",\n    headers: config.headers\n  }).then(dressResponse);\n}\nfunction getAllCards() {\n  return fetch(\"\".concat(config.url, \"/v1/\").concat(config.cohort, \"/cards\"), {\n    method: \"GET\",\n    headers: config.headers\n  }).then(dressResponse);\n}\nfunction profileInfoLoad(body) {\n  return fetch(\"\".concat(config.url, \"/v1/\").concat(config.cohort, \"/users/me\"), {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(dressResponse);\n}\nfunction loadNewCard(body) {\n  return fetch(\"\".concat(config.url, \"/v1/\").concat(config.cohort, \"/cards\"), {\n    method: \"POST\",\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(dressResponse);\n}\n\n// непонятно куда отправлять аватар\nfunction editUserIcon(avatar) {\n  return fetch(\"\".concat(config.url, \"/v1/\").concat(config.cohort, \"/users/me/avatar\"), {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify(avatar)\n  }).then(dressResponse);\n}\nfunction deleteCard(cardId) {\n  return fetch(\"\".concat(config.url, \"/v1/\").concat(config.cohort, \"/cards/\").concat(cardId), {\n    method: \"DELETE\",\n    headers: config.headers\n  }).then(dressResponse);\n}\n\n// loadNewCard({\n//   name: \"Anton Plekhov\",\n//   link: \"https://pictures-of-cats.org/wp-content/uploads/2021/11/Spooky-Sphynx-in-womans-clothes-and-wig1_edited.jpg\"\n// })\n\n// profileInfoLoad({\n//   name: 'Marie Skłodowska Curie',\n//   about: 'Physicist and Chemist'\n// })\n\n\n;// CONCATENATED MODULE: ./src/components/consts.js\nvar initialCards = [{\n  name: 'Архыз',\n  link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg'\n}, {\n  name: 'Челябинская область',\n  link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg'\n}, {\n  name: 'Иваново',\n  link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg'\n}, {\n  name: 'Камчатка',\n  link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg'\n}, {\n  name: 'Холмогорский район',\n  link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg'\n}, {\n  name: 'Байкал',\n  link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg'\n}];\nvar profileName = document.querySelector('.profile__info_header');\nvar profileDescriptor = document.querySelector('.profile__info_description');\nvar formEdit = document.querySelector('#popup-edit');\nvar formAdd = document.querySelector('#popup-add');\nvar buttonEditSubmit = formEdit.querySelector('.form__save-button');\nvar buttonAddSubmit = formAdd.querySelector('.form__save-button');\nvar nameInput = formEdit.querySelector('.form__profile_name');\nvar jobInput = formEdit.querySelector('.form__profile_motto');\nvar placeInput = formAdd.querySelector('.form-place-name');\nvar linkInput = formAdd.querySelector('.form-link');\nvar buttonProfileInfoEdit = document.querySelector('.profile__info_edit-button');\nvar formEditCloseButton = formEdit.querySelector('.form__close-icon');\nvar addCardButton = document.querySelector('.profile__add-button');\nvar addCardCloseButton = formAdd.querySelector('.form__close-icon');\nvar cardTemplate = document.querySelector('#card-template');\nvar cardsContainer = document.querySelector('.elements');\nvar allPage = document.querySelector('.page');\nvar cardPopup = document.querySelector('.popup__big-pic-template');\nvar configSelector = {\n  formSelector: '.form',\n  inputSelector: '.form__item',\n  submitButtonSelector: '.form__save-button',\n  inactiveButtonClass: 'form__button-blocked',\n  inputErrorClass: 'form__input-invalid'\n};\n\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\n\n\n\nfunction createCard(object) {\n  var clonedCard = cardTemplate.content.querySelector('.element__rectangle').cloneNode(true);\n  var pictureElement = clonedCard.querySelector('.element__image');\n  clonedCard.querySelector('.element__rectangle_text').textContent = object.name;\n  pictureElement.src = object.link;\n  pictureElement.alt = object.name;\n  cardsContainer.prepend(clonedCard);\n  var deleteBin = clonedCard.querySelector('.element__delete-button');\n  var likeHeart = clonedCard.querySelector('.element__rectangle_heart');\n  pictureElement.addEventListener('click', runImagePopup);\n  deleteBin.addEventListener('click', function () {\n    deleteCard(object._id).then(function () {\n      clonedCard.remove();\n      console.log(\"Element \".concat(object._id, \" deleted\"));\n    }).catch(function () {\n      return console.log(\"Cant delete card \".concat(object._id));\n    });\n  });\n  likeHeart.addEventListener('click', function (event) {\n    return event.target.classList.toggle('element__rectangle_heart-on');\n  });\n  return clonedCard;\n}\n;\n\n// initialCards.forEach(createCard);\n\ngetAllCards().then(function (data) {\n  data.forEach(createCard);\n  console.log(data);\n});\n\n;// CONCATENATED MODULE: ./src/components/validate.js\n\n\n\n\nfunction addError(inputElement, errorElement, config) {\n  inputElement.classList.add(config.inputErrorClass);\n  errorElement.textContent = inputElement.validationMessage;\n}\nfunction hideError(inputElement, errorElement, config) {\n  inputElement.classList.remove(config.inputErrorClass);\n  errorElement.textContent = 'All is fine';\n}\nfunction toggleButtonState(buttonElement, isActive, config) {\n  if (isActive) {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(config.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(config.inactiveButtonClass);\n  }\n}\nfunction checkInputValidity(inputElement, formElement, config) {\n  var isInputValid = inputElement.validity.valid;\n  var errorElement = formElement.querySelector(\"#\".concat(inputElement.name, \"-error\"));\n  if (!isInputValid) {\n    addError(inputElement, errorElement, config);\n  } else {\n    hideError(inputElement, errorElement, config);\n  }\n  errorElement.textContent = inputElement.validationMessage;\n}\nfunction enableValidation(config) {\n  var forms = document.querySelectorAll(config.formSelector);\n  Array.from(forms).forEach(function (formElement) {\n    setEventListener(formElement, config);\n  });\n}\n\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\n\n\nfunction runImagePopup(e) {\n  openPopup(cardPopup);\n  var targetCard = e.target.closest('.element__rectangle'); // забрали карту, на которую мы нажали\n  var chosenImage = targetCard.querySelector('.element__image');\n  var chosenText = targetCard.querySelector('.element__rectangle_text');\n  cardPopup.querySelector('.popup__big-picture').src = chosenImage.src;\n  cardPopup.querySelector('.popup__big-popup-descriptor').textContent = chosenText.textContent;\n}\n\n;// CONCATENATED MODULE: ./src/components/util.js\n\n\n\n\n\nfunction openPopup(modalElement) {\n  modalElement.classList.add('popup_opened');\n}\nfunction closePopup(modalElement) {\n  modalElement.classList.remove('popup_opened');\n}\n;\nfunction toggleLike(modalElement) {\n  modalElement.classList.toggle('element__rectangle_heart-on');\n}\n;\nformAdd.addEventListener('click', function (e) {\n  var target = e.target;\n  if (target.classList.contains('popup') || target.classList.contains('popup__close-icon') || target.classList.contains('form__close-icon')) {\n    var activePopup = document.querySelector('.popup_opened');\n    console.log('aaa');\n    closePopup(activePopup);\n  }\n});\nfunction handleFormSubmit(evt) {\n  evt.preventDefault();\n  setButtonText({\n    button: buttonEditSubmit,\n    text: 'Сохраняем...'\n  });\n  var name = nameInput.value;\n  var about = jobInput.value;\n  console.log({\n    name: name,\n    about: about\n  });\n  profileInfoLoad({\n    name: name,\n    about: about\n  }).then(function (data) {\n    profileName.textContent = data.name;\n    profileDescriptor.textContent = data.about;\n    console.log(data);\n  }).then(function () {\n    closePopup(formEdit);\n  }).catch(function (error) {\n    return console.log(error);\n  }).finally(function () {\n    setButtonText({\n      button: buttonEditSubmit,\n      text: 'Добавить'\n    });\n  });\n  //evt.target.reset();\n}\n;\nformEdit.addEventListener('submit', handleFormSubmit);\ngetUserData().then(function (data) {\n  return console.log(data);\n}).then(function (data) {\n  profileName.textContent = data.name;\n  profileDescriptor.textContent = data.about;\n  console.log(data);\n}).catch(function () {\n  return console.log('cant update profile info');\n});\nfunction setButtonText(button, text) {\n  button.textContent = text;\n}\n\n// function handleFormSubmit(evt){\n//   evt.preventDefault();\n//   profileName.textContent = nameInput.value;\n//   profileDescriptor.textContent = jobInput.value;\n//   evt.target.reset();\n//   closePopup(formEdit)\n// }; \n//   formEdit.addEventListener('submit', handleFormSubmit); \n\nfunction setEventListener(formElement, config) {\n  var inputList = formElement.querySelectorAll(config.inputSelector);\n  var submitButtonElement = formElement.querySelector(config.submitButtonSelector);\n  toggleButtonState(submitButtonElement, formElement.checkValidity(), config);\n  formElement.addEventListener('submit', function (e) {\n    e.preventDefault();\n  });\n  Array.from(inputList).forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      toggleButtonState(submitButtonElement, formElement.checkValidity(), config);\n      checkInputValidity(inputElement, formElement, config);\n    });\n  });\n}\n\n;// CONCATENATED MODULE: ./src/components/script.js\n\n\n\n\n\n\n\nfunction addCardManually(e) {\n  e.preventDefault();\n  var manualCard = {\n    name: \"\",\n    link: \"\"\n  };\n  manualCard.name = formAdd.querySelector('.form__profile_name').value;\n  manualCard.link = formAdd.querySelector('.form__profile_motto').value;\n  console.log(manualCard);\n  loadNewCard(manualCard).then(function () {\n    createCard(manualCard);\n  }).catch(function (error) {\n    console.log(\"Cant load card \".concat(error));\n  });\n  closePopup(formAdd);\n}\n\n//слушатель на кнопку редактирования профиля + открфтие формы редактирования + изменение инфы в шапке профиля\nbuttonProfileInfoEdit.addEventListener('click', function () {\n  nameInput.value = profileName.textContent.trim();\n  jobInput.value = profileDescriptor.textContent.trim();\n  openPopup(formEdit);\n});\n\n//слушатель на кнопку добавить фото + открытие формы добавления из темплейта + рендер картинки на страницу.\naddCardButton.addEventListener('click', function (e) {\n  e.preventDefault();\n  openPopup(formAdd);\n  console.log(formAdd);\n});\nformAdd.querySelector('.form__save-button').addEventListener('click', addCardManually);\nformEditCloseButton.addEventListener('click', function () {\n  return closePopup(formEdit);\n});\naddCardCloseButton.addEventListener('click', function () {\n  return closePopup(formAdd);\n});\ncardPopup.querySelector('.popup__close-icon').addEventListener('click', function () {\n  return closePopup(cardPopup);\n});\ndocument.addEventListener('keydown', function (evt) {\n  if (evt.keyCode === 27) {\n    closePopup(formAdd);\n    closePopup(formEdit);\n    closePopup(cardPopup);\n  }\n});\n\n// document.addEventListener('click', function(evt) {\n//   if (!evt.target == formAdd.querySelector('.form__container')) {\n//     closePopup(formAdd);\n//     closePopup(formEdit);\n//     closePopup(cardPopup);\n//   }\n// });\n\nenableValidation(configSelector);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///734\n")}},__webpack_exports__={};__webpack_modules__[734]()})();